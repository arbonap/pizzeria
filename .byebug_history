c
params[:order][:items].map { |item| Item.create(:quantity => item[:quantity], :order => @order, :pizza_type => PizzaType.create(:name => item[:pizza_type][:name], :price => item[:pizza_type][:price])) }
params[:order][:items].map { |item| Item.create(:quantity => item[:quantity], :order => @order, :pizza_type => PizzaType.create(:name => item[:pizza_type][:name], :price => item[:pizza_type][:price]) }
params[:order][:items].map { |item| Item.create(:quantity => item[:quantity], :order => @order) }
params[:order][:items].map { |item| Item.create(:quantity => item[:quantity], :order => @order.id) }
@order
c
params[:order][:items].map { |item| Item.create(:quantity => item[:quantity], :order => @order.id) }
quit
params[:order][:items].map { |item| Item.create(:quantity => item[:quantity], :order => @order.id) }
params[:order]
Order.create
params[:order][:items].map { |item| Item.create(:quantity => item[:quantity]) }
params[:order][:items].map { |item| item[:quantity] }
params[:order][:items]
params[:order][:items].map(&:quantity)
params[:order][:items][0][:quantity]
params[:order][:items][0]
params[:order][:items]
params[:order]
params
quit
params[:order]
params[:id]
params
order_params
quit
params.require(:order).permit(items: [:quantity, {pizza_type: [:name, :price]}])
params.require(:order).permit(items: {})
params.require(:order).permit(items: {quantity})
params.require(:order).permit(items: {:quantity})
params.require(:order).permit(items: {quantity})
params.require(:order).permit(items: {quantity: []})
params.require(:order).permit(items: {})
params.require(:order).permit(items: [])
params.require(:order).permit(item: [])
params.require(:order).permit(items: [])
params.require(:order).permit([])
params.require(:order)
params.require(:order).require(:items)[0].permit(:quantity)
params.require(:order).require(:items)[0].require(:quantity)
params.require(:order).require(:items)[0]
params.require(:order).require(:items)
params.require(:order).require(:items).require(:quantity)
params.require(:order).require(:items).permit(:quantity)
params.require(:order).require(:items)
params.require(:order)
params.require(:order).permit(:item)
params.require(:order).permit(:items)
params.permit(:items, :order)
params.permit(:items)
params.require(:order).permit({:items => [{:quantity, {:pizza_type => [:name, :price]}}]})
params.require(:order).permit({:items => [{:quantity, [:pizza_type => [:name, :price]]}]})
params.require(:order).permit({:items => [{:quantity, [:pizza_type => {:name, :price}]}]})
params.require(:order).permit({:items => [{:quantity, :pizza_type => {:name, :price}}]})
params.require(:order).permit({:items => [{:quantity}]})
params.require(:order).permit({:items => []})
params.require(:order).permit({:items})
params.require(:order).permit([:items])
params.require(:order).permit(:items)
params.require(:order)
params
continue
params
param
items.pluck(:qutotal_item_price)
items.pluck(:total_item_price)
third_order.items.map(&:total_item_price)
third_order.map(&:total_item_price)
third_order
items.map(&:total_item_price)
2f % third_order.items.map(&:total_item_price).reduce(:+)
2%f % third_order.items.map(&:total_item_price).reduce(:+)
2f % third_order.items.map(&:total_item_price).reduce(:+)
third_order.items.map(&:total_item_price).reduce(:+)
third_order.items.map(&:total_item_price).reduce(:+).to_f
third_order.items.reduce{ |item| item += 0}
third_order.items.reduce{ |item| item}
third_order.items.reduce{ |x, item| item + x}
third_order.items.reduce{ |0, item| item + 0}d
third_order.items.reduce{ |0, item| 0 += item}
third_order.items.map(&:total_item_price).reduce(:+).to_i
third_order.items.map(&:total_item_price).reduce(:+).methods
third_order.items.map(&:total_item_price).reduce(:+)
third_order.items.map(&:total_item_price)
third_order.items.first.total_item_price
third_order.items.first
third_order.items
third_order.items.map(&:pizza_type)
third_order.items.pluck(:pizza_type)
third_order.items.pluck(pizza_type)
third_order.items.pluck(:pizza_type)
third_order.items
third_order
third_order = Order.find(3)
self
Item.count
Order.count
items.count
items
self.items
self
